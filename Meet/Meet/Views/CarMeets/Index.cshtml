@model IEnumerable<Meet.ViewModels.CarMeetListRecord>
@{
    ViewData["Title"] = "Meets";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Meets</h1>
<style>
    .table-hover tbody tr:hover td {
        background: lightgray;
    }
    </style>
<p id="inlineButtons">
    <table class="table">
        <tr>
            <th>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Want to explore Meets in a different area?</span>
                    </div>
                    <input type="number" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Zipcode" maxlength="5" id="zipCodeInput">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" onclick="searchByZip(document.getElementById('zipCodeInput').value)" onkeypress="searchByZip(document.getElementById('zipCodeInput').value)">Search</button>
                    </div>
                </div>
            </th>
            <th>
                <a type="button" class="btn btn-primary btn-group-sm" asp-controller="CarMeets" asp-action="Create" >Create A New Meet</a>
            </th>
        </tr>
    </table>
    
    
    
</p>
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">
                @Html.DisplayNameFor(model => model.MeetName)
            </th>
        
            <th scope="col">
                @Html.DisplayNameFor(model => model.Street)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.State)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Zip)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.MeetTime)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.MeetDate)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr onclick="location.href = '@Url.Action("Details", "CarMeets", new { id=item.MeetId })'" title="Click to show details.">
                <td scope="row">
                    @Html.DisplayFor(modelItem => item.MeetName)
                </td>
             
                <td>
                    @Html.DisplayFor(modelItem => item.Street)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.State)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Zip)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MeetTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MeetDate)
                </td>
            </tr>
        }
    </tbody>
</table>

<style type="text/css">
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }

    .gm-style-iw + button {
        display: none;
        border: none;
    }

    .gm-style-iw button:focus {
        outline: 0;
    }
</style>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script async="false" type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@Meet.ApiKeys.GoogleApiKey&callback=initMap&libraries=&v=weekly"></script>

<script>

    var myLatLng = { lat: 35.227085, lng: -80.843124 };
    var useBrowserLocation = false;
    var zipState = '';
    var useSearchByZip = false;
    var browserCoords = {};
    navigator.geolocation.getCurrentPosition(showPosition, positionError);
    function showPosition(position) {
        var coords = position.coords;
        browserCoords = { lat: coords.latitude, lng: coords.longitude };
        useBrowserLocation = true;
        console.log('showposotion true', browserCoords);
        initMap();
    }
    function positionError(position) {
        console.log('showposition false')
        useBrowserLocation = false;
        initMap();
    }
    function isInfoWindowOpen(infoWindow) {
        var map = infoWindow.getMap();
        return (map !== null && typeof map !== "undefined");
    }

    function searchByZip(zipCode) {
        console.log('zip', zipCode)
        document.getElementById('zipCodeInput').value = ""
        geocoder.geocode({ 'address': zipCode.toString() }, function (results, status) {
            if (status == 'OK') {
                console.log('help results', results, zipCode)
                myLatLng = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng()}
                // zipState = results[0].address_components[3].short_name.toString();
                console.log('lat lnmg', myLatLng, zipState)
                useSearchByZip = true;
                initMap();
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

    function initMap() {
        if (google) {
            geocoder = new google.maps.Geocoder();
        }
        var meet = @Html.Raw(Json.Serialize(Model.FirstOrDefault()));


        if (!useSearchByZip) {
            if (useBrowserLocation) {
                myLatLng = browserCoords;
            }
            else {
                if (meet != null) {
                    console.log('hit')
                    myLatLng = { lat: meet.userLat, lng: meet.userLong };
                }
            }
        }

        const map = new google.maps.Map(document.getElementById("map"), {
            zoom: 11,
            center: myLatLng,
        });
        const infoWindow = new google.maps.InfoWindow();
 
        var meets = @Html.Raw(Json.Serialize(Model));
        if (meets.length != 0) {
            for (let i = 0; i < meets.length; i++) {
                var meet = meets[i];
                // if (useSearchByZip) {
                //     if (meet.state == zipState) {
                //         var Latitude = meet.lat;
                //         var Longitude = meet.long;
                //         var label = (i + 1).toString();
                //         myLatLng = { lat: Latitude, lng: Longitude }
                //         const marker = new google.maps.Marker({
                //             position: myLatLng,
                //             map,
                //             title: meet.meetName,
                //             label: label
                //         });
                //         marker.addListener("click", () => {
                //             if (isInfoWindowOpen(infoWindow)) {
                //                 infoWindow.close();

                //             }
                //             else {
                //                 infoWindow.close();
                //                 infoWindow.setContent(marker.getTitle());
                //                 infoWindow.open(marker.getMap(), marker);
                //                 infoWindow.focus(marker)
                //             }

                //         });
                //     }
                // }
                // else {
                    var Latitude = meet.lat;
                    var Longitude = meet.long;
                    var label = (i + 1).toString();
                    myLatLng = { lat: Latitude, lng: Longitude }
                    const marker = new google.maps.Marker({
                        position: myLatLng,
                        map,
                        title: meet.meetName,
                        label: label
                    });
                    marker.addListener("click", () => {
                        if (isInfoWindowOpen(infoWindow)) {
                            infoWindow.close();

                        }
                        else {
                            infoWindow.close();
                            infoWindow.setContent(marker.getTitle());
                            infoWindow.open(marker.getMap(), marker);
                            infoWindow.focus(marker)
                        }

                    });
                //}
                
            }
        }
    }
</script>
    <body>

        <div id="map"></div>
    </body>
